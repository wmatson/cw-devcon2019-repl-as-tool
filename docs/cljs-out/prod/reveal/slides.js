// Compiled by ClojureScript 1.10.516 {:static-fns true, :optimize-constants true}
goog.provide('reveal.slides');
goog.require('cljs.core');
goog.require('cljs.core.constants');
goog.require('reveal.example_data');
goog.require('reveal.klipse');
goog.require('reveal.vendored_medley');
goog.require('cljs.pprint');
reveal.slides.stringify_code = (function reveal$slides$stringify_code(quoted_code){
var sb__4661__auto__ = (new goog.string.StringBuffer());
var _STAR_print_newline_STAR__orig_val__14769_14775 = cljs.core._STAR_print_newline_STAR_;
var _STAR_print_fn_STAR__orig_val__14770_14776 = cljs.core._STAR_print_fn_STAR_;
var _STAR_print_newline_STAR__temp_val__14771_14777 = true;
var _STAR_print_fn_STAR__temp_val__14772_14778 = ((function (_STAR_print_newline_STAR__orig_val__14769_14775,_STAR_print_fn_STAR__orig_val__14770_14776,_STAR_print_newline_STAR__temp_val__14771_14777,sb__4661__auto__){
return (function (x__4662__auto__){
return sb__4661__auto__.append(x__4662__auto__);
});})(_STAR_print_newline_STAR__orig_val__14769_14775,_STAR_print_fn_STAR__orig_val__14770_14776,_STAR_print_newline_STAR__temp_val__14771_14777,sb__4661__auto__))
;
cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR__temp_val__14771_14777;

cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR__temp_val__14772_14778;

try{var _STAR_print_pprint_dispatch_STAR__orig_val__14773_14779 = cljs.pprint._STAR_print_pprint_dispatch_STAR_;
var _STAR_print_pprint_dispatch_STAR__temp_val__14774_14780 = cljs.pprint.code_dispatch;
cljs.pprint._STAR_print_pprint_dispatch_STAR_ = _STAR_print_pprint_dispatch_STAR__temp_val__14774_14780;

try{cljs.pprint.pprint.cljs$core$IFn$_invoke$arity$1(quoted_code);
}finally {cljs.pprint._STAR_print_pprint_dispatch_STAR_ = _STAR_print_pprint_dispatch_STAR__orig_val__14773_14779;
}}finally {cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR__orig_val__14770_14776;

cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR__orig_val__14769_14775;
}
return cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4661__auto__);
});
reveal.slides.live_coding = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$section,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$p,"There are duplicate IDs in this data!"], null),reveal.klipse.klipse_snippet(new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$height,"400px",cljs.core.cst$kw$hidden_DASH_code,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$do,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$def,null,(1),null)),(new cljs.core.List(null,cljs.core.cst$sym$data,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.vec(reveal.example_data.shuffled_data_with_duplicates),null,(1),null))], 0)))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,reveal.vendored_medley.medley,null,(1),null))], 0)))),cljs.core.cst$kw$code,cljs.core.cst$sym$data], null)),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$footer$attribution,"Names lifted from ",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$a,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$href,"https://gist.github.com/ruanbekker/a1506f06aa1df06c5a9501cb393626ea"], null),"https://gist.github.com/ruanbekker/a1506f06aa1df06c5a9501cb393626ea"], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$p$fragment,"Are there duplicate names?"], null)], null);
reveal.slides.intro = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$section,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$section,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$h2,"Coding Convenient Clojure Contraptions"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$h5,"Wesley Matson"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$footer$attribution,"Clearwater Developer Conference 2019"], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$section,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$h2,"About Me"], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$ul,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$li,"~7 years Clearwater Tenure"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$li,"35+ Programming Languages"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$li,"Non-programming Hobbies"], null)], null)], null),reveal.slides.live_coding,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$section,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$h2,"Agenda"], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$ul,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$li,"Context"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$li,"Case Studies"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$li,"Challenges"], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$p$fragment,"Interrupt me!"], null)], null)], null);
reveal.slides.context_establishment = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$section,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$section,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$h2,"Definitions"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$ul,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$li,"REPL"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$li,"Scratchpad Project"], null)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$section,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$h2,"Scratchpad Projects"], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$ul,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$li$fragment,"Why?"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$li$fragment,"Why Clojure?"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$li$fragment,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$div,"Directory Structure"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$pre,"project.clj\n/src/&lt;project-name&gt;\n    /protos\n    /services\n    /one_offs"], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$li$fragment,"Share!"], null)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$section,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$h2,"Useful Libs"], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$ul,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$li,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$a,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$href,"https://github.com/weavejester/medley"], null),"weavejester/medley"], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$li,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$a,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$href,"https://github.com/dakrone/clj-http"], null),"clj-http"], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$li,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$a,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$href,"https://github.com/dakrone/cheshire"], null),"cheshire"], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$li,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$a,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$href,"https://github.com/TheClimateCorporation/claypoole"], null),"claypoole"], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$li,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$a,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$href,"https://github.com/ptaoussanis/tufte"], null),"tufte"], null)], null)], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$section,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$code$hljs,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$data_DASH_line_DASH_numbers,"",cljs.core.cst$kw$data_DASH_trim,"true"], null),reveal.slides.stringify_code(cljs.core.list(cljs.core.cst$sym$ns,cljs.core.cst$sym$scratcpad$one_DASH_offs$some_DASH_endpoint_DASH_investigation,cljs.core.list(cljs.core.cst$kw$require,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cheshire$core,cljs.core.cst$kw$as,cljs.core.cst$sym$json], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$clj_DASH_http$client,cljs.core.cst$kw$as,cljs.core.cst$sym$http], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$medley$core,cljs.core.cst$kw$as,cljs.core.cst$sym$medley], null))))], null)], null)], null)], null);
reveal.slides.endpoint_performance = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$section,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$section,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$h2,"Case Study"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$p,"Endpoint Performance"], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$section,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$pre$stretch,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"font-size: .4em;"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$code,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$data_DASH_line_DASH_numbers,""], null),"(ns scratchpad.one-offs.rawsp-request-size-profiling\r\n  (:require [clj2018-scratchpad.services.raw-security-pricing :as rawsp]\r\n            [clj2018-scratchpad.services.portfolio :as portfolio]\r\n            [com.climate.claypoole :as cp]\r\n            [taoensso.tufte :as tufte]))\r\n\r\n(defn- large-request [{:keys [sec-ids source-ids date]}]\r\n  (tufte/p :rawsp/large-request\r\n           (doall (rawsp/full-lookup sec-ids source-ids date date))))\r\n\r\n(defn- partition-sec-ids [{:keys [sec-ids source-ids date]}]\r\n  (tufte/p :rawsp/sec-partitions\r\n           (doall (-&gt;&gt; (partition-all 200 sec-ids)\r\n                       (cp/pmap 50 #(rawsp/full-lookup % source-ids date date))\r\n                       (apply merge)))))\r\n\r\n(defn- partition-src-ids [{:keys [sec-ids source-ids date]}]\r\n  (tufte/p :rawsp/source-partitions\r\n           (doall (-&gt;&gt; (partition-all 1 source-ids)\r\n                       (cp/pmap 20 #(rawsp/full-lookup sec-ids % date date))\r\n                       (apply merge)))))\r\n\r\n(tufte/add-basic-println-handler! {})\r\n(tufte/profile {:dynamic? true}\r\n  (dotimes [_ 20]\r\n    (let [date \"2019-05-15\"\r\n          sec-ids (portfolio/get-securities {:account-ids [314159] :date date})\r\n          params {:date date :sec-ids sec-ids :source-ids [6 16 8 8 14 15 29 18 ,,,]}]\r\n      (= (large-request params)\r\n         (partition-sec-ids params)\r\n         (partition-src-ids params)))))\r\n"], null)], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$section,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$pre,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"font-size: .31em; width: 100%;"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$code,"                     pId     nCalls        Min      50% \u2264      90% \u2264      95% \u2264      99% \u2264        Max       Mean   MAD       Total   Clock\r\n\r\n    :rawsp/large-request         20   945.15ms     1.05s      1.10s      1.11s      1.13s      1.13s      1.04s    \u00B14%     20.72s      58%\r\n:rawsp/source-partitions         20   381.04ms   411.73ms   424.79ms   507.61ms   540.62ms   540.62ms   416.96ms   \u00B15%      8.34s      23%\r\n   :rawsp/sec-partitions         20   209.10ms   305.10ms   441.57ms   444.24ms   453.98ms   453.98ms   296.50ms  \u00B122%      5.93s      16%\r\n\r\n               Accounted                                                                                                   34.99s      97%\r\n                   Clock                                                                                                   36.01s     100%\r\n"], null)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$section,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$h4,"Similar Applications"], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$ul,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$li,"Regression testing",new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$span," (",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$a,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$href,"https://clojuredocs.org/clojure.data/diff"], null),"clojure.data/diff"], null),")"], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$li,"Stress testing",new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$span," (",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$a,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$href,"https://github.com/TheClimateCorporation/claypoole"], null),"claypoole"], null),")"], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$li,"Smoke testing"], null)], null)], null)], null);
reveal.slides.diagnostic_watch = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$section,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$section,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$h2,"Case Study"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$p,"Diagnostic Watching"], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$section,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$pre$stretch,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"font-size: .33em;"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$code,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$data_DASH_line_DASH_numbers,""], null),"(ns scratchpad.one-offs.przo-3223-diagnostic-endpoint-diagnostics\r\n  (:require [clojure.java.jdbc :as jdbc]\r\n            [clj-http.client :as http]\r\n            [clojure.core.async :as async :refer [&gt;! go &lt;!]]\r\n            [cheshire.core :as json]))\r\n\r\n(def db-conn\r\n  {:classname \"com.microsoft.sqlserver.jdbc.SQLServerDriver\"\r\n   :connection-uri \"jdbc:sqlserver://dev-pricing-db;database=Scratchpad;integratedSecurity=true\"})\r\n\r\n(defn get-most-recent []\r\n  (-&gt; (jdbc/query db-conn [\"SELECT TOP 1 result FROM DiagnosticHits ORDER BY tsHit DESC\"])\r\n      first :result json/decode))\r\n\r\n(defn get-diags []\r\n  (:body (http/get \"http://production-prezo-host:8084/prezo-ws/status/diagnostics\"\r\n                   {:as :json-string-keys})))\r\n\r\n(defn- component-same [most-recent new component]\r\n  (= (set (keys (get-in most-recent [\"components\" component])))\r\n     (set (keys (get-in new [\"components\" component])))))\r\n\r\n(defn- changed? [most-recent new]\r\n  (not-every? #(component-same most-recent new %) [\"ok\" \"warning\" \"critical\"]))\r\n\r\n(defn persist-changes! []\r\n  (let [new (get-diags)]\r\n    (when (changed? (get-most-recent) new)\r\n      (jdbc/insert! db-conn \"DiagnosticHits\" [\"result\"] [(json/encode new)]))))\r\n\r\n(async/go-loop []\r\n  (&lt;! (async/timeout 5000))\r\n  (try\r\n    (persist-changes!)\r\n    (catch Exception e\r\n      (.printStackTrace e)))\r\n  (recur))\r\n"], null)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$section,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$h3,"Diagnostic Watch Results"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$img$stretch,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$src,"img/diagnostic-results.png"], null)], null)], null)], null);
reveal.slides.legacy_client = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$section,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$section,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$h2,"Case Study"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$p,"Legacy Java Client"], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$section,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$pre$stretch,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$style,"font-size: .42em;"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$code$clojure,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$data_DASH_line_DASH_numbers,""], null),"(ns scratchpad.services.fx-client\r\n  (:require [com.climate.claypoole :as cp])\r\n  (:import [com.ca.fx.client FxClient]\r\n           [com.ca.util.date GlobalDate GlobalDates]))\r\n\r\n(def fx-client (FxClient.))\r\n\r\n(defn get-rate [account-id from-currency to-currency date-string]\r\n  (try\r\n    (let [spot-rate-repo (.. fx-client\r\n                             getSpotRateRepositoryResource\r\n                             fetchSpotRateRepository)]\r\n      (.lookupBalanceSheetRate spot-rate-repo account-id\r\n                               from-currency to-currency\r\n                               (GlobalDates/create date-string \"yyyy-MM-dd\")))\r\n    (catch Exception e\r\n      (ex-info \"It's broken\" {:account-id account-id} e))))\r\n\r\n(comment\r\n  ;;All accounts from PRC-3640\r\n  (let [account-ids [3 1 4 15 9 2 6 53 89 79 ,,,]]\r\n    (cp/upmap 20 #(get-rate % 4 1 \"2018-09-04\") account-ids))\r\n\r\n  (get-rate 12345 10 1 \"2018-08-30\"))\r\n"], null)], null)], null)], null);
reveal.slides.other_cases = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$section,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$h2,"Other Possibilities"], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$ul,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$li,"Endpoint Scraping"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$li,"Migrating between data models"], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$li,"Seeding ",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$a,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$href,"https://cucumber.io/docs/guides/10-minute-tutorial/"], null),"cucumber"], null),"ish tests"], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$li,"Admin Tools (e.g. ",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$a,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$href,"https://github.com/FundingCircle/jackdaw/blob/master/src/jackdaw/admin.clj"], null),"for Kafka"], null),") "], null)], null)], null);
reveal.slides.adoption_difficulties = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$section,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$section,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$h2,"Adoption Nontrivial"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$ul$fragment,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$li,"Clojure Resistance"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$li,"Tooling"], null)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$section,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$h2,"Coping Strategies"], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$ul,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$li,"Call to authority"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$li,"Build something useful"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$li,"Outlearn and outteach"], null)], null)], null)], null);
reveal.slides.conclusion = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$section,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$section,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$h2,"Additional Resources"], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$ul,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$li,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$a,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$href,"https://www.youtube.com/watch?v=Qx0-pViyIDU"], null),"Running with Scissors by Stuart Halloway"], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$li,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$a,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$href,"https://www.braveclojure.com"], null),"Clojure for the Brave and True"], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$li,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$a,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$href,"https://www.reddit.com/r/Clojure/"], null),"/r/Clojure"], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$li,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$a,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$href,"https://github.com/den1k/zeal"], null),"Zeal"], null)," (REPL meets clipboard manager)"], null)], null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$section,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$h2,"Summing Up"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$p,"Scratchpad projects augment teams"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$p,"Clojure helps"], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$section,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$h2,"Questions?"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$footer$attribution,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$div,"Slides Source: ",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$a,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$href,"https://github.com/wmatson/cw-devcon2019-repl-as-tool"], null),"https://github.com/wmatson/cw-devcon2019-repl-as-tool"], null)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$div,"Created with ",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$a,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$href,"https://github.com/n2o/reveal-cljs"], null),"reveal-cljs"], null)," and ",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$a,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$href,"https://github.com/viebel/klipse"], null),"klipse"], null)], null)], null)], null)], null);
/**
 * Add here all slides you want to see in your presentation.
 */
reveal.slides.all = (function reveal$slides$all(){
return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [reveal.slides.intro,reveal.slides.context_establishment,reveal.slides.endpoint_performance,reveal.slides.diagnostic_watch,reveal.slides.legacy_client,reveal.slides.other_cases,reveal.slides.adoption_difficulties,reveal.slides.conclusion], null);
});
